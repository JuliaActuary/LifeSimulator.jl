var documenterSearchIndex = {"docs":
[{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"EditURL = \"getting_started.jl\"","category":"page"},{"location":"tutorial/getting_started/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"Let's run a few simulations to get a feel of the package functionality.","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"First, we have to choose a Model to simulate. There are a few to choose from, essentially divided in two categories: TermLifeModels, representing term life insurance, and UniversalLifeModels, representing universal life insurance. For this example, we will take a simple term life model based on lifelib, reimplemented in Julia. There are two implementations we can choose from: a memoized implementation, and an iterative implementation. The memoized implementation replicates 1:1 the design of the corresponding Python library, and has a less polished interface. For this reason, we will take the iterative implementation, LifelibBasiclife, which will allow us to showcase most of the data structures relevant in context of this package.","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"using LifeSimulator, Dates\nmodel = LifelibBasiclife()","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"Second, we define a bunch of policies that we want to simulate forward in time. Such policies represent life insurance products. Ideally, we would simulate individual products, that is, separate contracts for different customers. However, for efficiency and scalability reasons, such insurance products are implemented as sets of products. That is, a contract is weighted by a number of customers holding this type of contract. those are called [PolicySet]s. We can generate some randomly using Base.rand:","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"rand(PolicySet, 500)","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"But for this example, we'll use a small set of fixed policies to guarantee the consistency of results across runs (which will allow us to reliably interpret what we obtain). We'll stick to the default values for the most part.","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"policies = [\n  PolicySet(Policy(term = Year(20), age = Year(20), premium = 200_000), 100),\n  PolicySet(Policy(term = Year(20), age = Year(45), premium = 600_000), 80),\n  PolicySet(Policy(term = Year(10), age = Year(70), premium = 400_000), 50),\n]","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"Now that we have a model and policies to evolve over time, we can carry out a simulation using simulate over a specified time range.","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"First, as we're just experimenting, we can simulate a single step and print what happened during that time. The data structure that will be provided to our custom callback function will be a SimulationEvents, and we can just print it out for now.","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"n = 1 # number of timesteps\nsimulate(model, policies, n) do events\n  println(sprint(show, MIME\"text/plain\"(), events))\nend;\nnothing #hide","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"This SimulationEvents data structure has information about deaths, lapses, new and expired policies, claims and expenses. This is all useful to compute cash flows and miscellaneous costs involved for the insurance company providing the insurance products.","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"In fact, the computation of cash flows is usually the main point of interest of such simulations, which warranted its implementation in this package: enters CashFlow.","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"Now, instead of printing the raw SimulationEvents, we can print the associated CashFlow quite simply:","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"simulate(model, policies, n) do events\n  cf = CashFlow(events, model)\n  println(sprint(show, MIME\"text/plain\"(), cf; context = :color => true))\nend;\nnothing #hide","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"We got a negative cashflow, from the perspective of the insurance company. Why is that? In our model, establishing new contracts (policies) has a fixed cost, which is part of the expenses reported by the SimulationEvents during printing earlier.","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"But note that we only computed cash flows due to the various events that occurred during the simulation. We have not computed cash flows related to active policies, and therefore, our value for the net cash flow is incomplete! Let's fix that. We will need to manually build a Simulation object so we can reference during the computation of cash flows, and use simulate! to mutate this simulation in-place. Note that the simulate function essentially does the same thing, it's just that it won't give you access to the simulation object itself.","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"simulation = Simulation(model, policies)\nsimulate!(simulation, n) do events\n  cf = CashFlow(simulation) # premiums, policy upkeep costs, commissions\n  cf += CashFlow(events, model) # claims, costs for new policies\n  println(sprint(show, MIME\"text/plain\"(), cf; context = :color => true))\nend;\nnothing #hide","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"Note how the net cashflow is now positive: the premiums balance out the costs incurred by policy acquisitions to the insurance company, as well as claims made during that period.","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"Instead of building a Simulation, and then computing cash flows manually, convenience functions are provided when the sole interest of the simulation is to compute cash flows:","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"n = 5\nCashFlow(model, policies, n)","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"CashFlow(model, policies, n) do cashflow\n  println(sprint(show, MIME\"text/plain\"(), cashflow; context = :color => true))\nend;\nnothing #hide","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"For term life insurance products, it will be normal for the company to have a decreasing revenue over time, as the premium remains fixed while mortality increases. An exception is typically made for the first year, during which commissions to agents are generally paid a large percentage of the premium.","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"","category":"page"},{"location":"tutorial/getting_started/","page":"Getting started","title":"Getting started","text":"This page was generated using Literate.jl.","category":"page"},{"location":"reference/#API","page":"Reference","title":"API","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [LifeSimulator]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [LifeSimulator]\nPrivate = false","category":"page"},{"location":"reference/#LifeSimulator.SHOW_PROGRESS","page":"Reference","title":"LifeSimulator.SHOW_PROGRESS","text":"Boolean flag indicating whether to show progress during a simulation.\n\nSee also: simulate, simulate!\n\n\n\n\n\n","category":"constant"},{"location":"reference/#LifeSimulator.CashFlow","page":"Reference","title":"LifeSimulator.CashFlow","text":"Represents cashflows, typically to be computed during a Simulation over an insurance Model.\n\nThe present value of future cashflows is estimated from the future cashflows using a model-provided discount rate.\n\nCashflows may be added with +, which will perform the addition over each respective field.\n\nSee also: Simulation, Model\n\n\n\n\n\n","category":"type"},{"location":"reference/#LifeSimulator.LifelibBasiclife","page":"Reference","title":"LifeSimulator.LifelibBasiclife","text":"Term life insurance model replicating the functionality of lifelib's basiclife module.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LifeSimulator.LifelibSavings","page":"Reference","title":"LifeSimulator.LifelibSavings","text":"Universal life model reimplemented from lifelib's savings library.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LifeSimulator.Model","page":"Reference","title":"LifeSimulator.Model","text":"Model defining the evolution of policies with regards to lapses, cashflows and, for UniversalLifeModels, account values for policy holders.\n\nModels are to be evaluated using a Simulation.\n\nSee also: Policy, TermLifeModel, UniversalLifeModel\n\n\n\n\n\n","category":"type"},{"location":"reference/#LifeSimulator.Policy","page":"Reference","title":"LifeSimulator.Policy","text":"Policy held with a corresponding account value.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LifeSimulator.PolicySet","page":"Reference","title":"LifeSimulator.PolicySet","text":"Aggregation of a specific type of policy among many policy holders.\n\nThe account for universal life models is therefore also unique among all policy holders, amounting to a total of set.policy.account_value * policy_count(set)\n\n\n\n\n\n","category":"type"},{"location":"reference/#LifeSimulator.Simulation","page":"Reference","title":"LifeSimulator.Simulation","text":"Simulation parametrized by a particular Model.\n\nThe simulation time starts at the current date by default. The simulation is carried out every month, producing events ([SimulationEvents]) corresponding to what happened between two timesteps, i.e. from one month to the other. The simulation is nonetheless stateful, meaning that such events may only be produced once; the next evaluation will return the events for the timestep after that.\n\nSee also: next!\n\n\n\n\n\n","category":"type"},{"location":"reference/#LifeSimulator.SimulationEvents","page":"Reference","title":"LifeSimulator.SimulationEvents","text":"Events that happen as part of a simulation timestep for a Model.\n\nThese events are meant to be processed by the user in order to generate quantities of interest that do not involve simulation-related state. This is, for example, how the CashFlow quantities are computed.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LifeSimulator.TermLifeModel","page":"Reference","title":"LifeSimulator.TermLifeModel","text":"Term life model.\n\nTerm life contracts start at a given date, and expire at a specified term. Upon death, the policy may be claimed, providing the policy holder with an assured amount.\n\nPremiums must be paid every month, otherwise the contract is cancelled (lapses).\n\n\n\n\n\n","category":"type"},{"location":"reference/#LifeSimulator.UniversalLifeModel","page":"Reference","title":"LifeSimulator.UniversalLifeModel","text":"Universal life model.\n\nThe defining property of a universal life model is that the contract between an insurance company and a policy holder involves a client-managed bank account, where the policy holder is responsible for keeping the bank account appropriately filled.\n\nLapses do not occur in absence of a payment, but rather when the bank account runs out of money while fees or premiums must be paid. It is, for example, for the policy holder to put a lot of money in the bank account and forget about it for a while, as opposed to a regular term life insurance model which requires frequent payments without such buffer.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LifeSimulator.estimate_premiums-Tuple{LifelibBasiclife, Any, Any}","page":"Reference","title":"LifeSimulator.estimate_premiums","text":"Run a first simulation to estimate premiums for each policy, returning policies with the estimated premiums.\n\nInstead of running a full simulation, and producing a SimulationEvents at every step, we manually go through the lapse and mortality stages only to speed it up a bit.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LifeSimulator.next!-Tuple{Simulation{<:LifelibBasiclife}, SimulationEvents}","page":"Reference","title":"LifeSimulator.next!","text":"Perform a simulation timestep over the LifelibBasiclife model, returning a SimulationEvents.\n\nFirst, the policies which reached their term are removed, yielding claims and account changes.\n\nSecond, the policies which start from the current month are added, yielding expenses (costs for the insurance company).\n\nThen, at the middle of the month, deaths and lapses occur. Finally, the simulation time is incremented.\n\nA callback may be run just before the deaths and lapses occur, as the original basiclife model considers lapses and deaths to be part of the next iteration (i.e., deaths and lapses occur prior to the next step, and not in the current step).\n\n\n\n\n\n","category":"method"},{"location":"reference/#LifeSimulator.next!-Tuple{Simulation{<:LifelibSavings}, SimulationEvents}","page":"Reference","title":"LifeSimulator.next!","text":"Perform a simulation timestep over the LifelibSavings model, returning a SimulationEvents.\n\nFirst, the policies which reached their term are removed, yielding claims and account changes.\n\nSecond, the policies which start from the current month are added, yielding expenses (costs for the insurance company).\n\nThird, all account values are updated, with:\n\nA premium amount put into the bank account (minus fees, the load premium rate).\nMaintenance fees withdrawn from the back account.\nInsurance costs withdrawn from the back account.\nInvestments realized during the previous month.\n\nThen, at the middle of the month, deaths and lapses occur. Finally, the simulation time is incremented.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LifeSimulator.policies_from_csv","page":"Reference","title":"LifeSimulator.policies_from_csv","text":"Import policies from CSV files compatible with the lifelib model.\n\n\n\n\n\n","category":"function"},{"location":"reference/#LifeSimulator.simulate!-Tuple{Any, Simulation, Int64}","page":"Reference","title":"LifeSimulator.simulate!","text":"simulate!(f, sim::Simulation, n)\n\nIteratively update a Simulation in-place with n 1-month timesteps.\n\nSee also: simulate\n\n\n\n\n\n","category":"method"},{"location":"reference/#LifeSimulator.simulate-Tuple{Any, Model, Any, Int64}","page":"Reference","title":"LifeSimulator.simulate","text":"simulate(f, model, policies, n)\n\nSimulate a set of policies forward in time according to the provided model, for n months.\n\nAfter every iteration, f(events::SimulationEvents) is called, and may be used for example to compute and keep track of cashflows.\n\nSee also: SimulationEvents, CashFlow\n\n\n\n\n\n","category":"method"},{"location":"#LifeSimultor.jl","page":"Home","title":"LifeSimultor.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LifeSimulator is a package for simulating insurance products forward in time. It currently contains two classes of models: TermLifeModel and UniversalLifeModel.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The novelty of this package lies in the implementation strategy for such simulations. In the actuarial world, data-oriented designs using spreadsheet-like functionality are widely used. Such designs rely on extensive caching for their performance; however, as data dependencies may be complex for more elaborate models, managing the cache size is not trivial and may hurt performance or increase memory consumption if not carefully managed. We chose here to implement a simulation mechanism using a straightforward iterative approach, where policies are evolved forward in time. We believe it allows for simpler implementations, better reusability of functions across models, and ease of extensibility; for the latter, we support arbitrary user-defined callbacks, along with access to explicit simulation events SimulationEvents at every timestep.","category":"page"}]
}
