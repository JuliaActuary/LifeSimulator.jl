var documenterSearchIndex = {"docs":
[{"location":"#LifeSimultor.jl","page":"Home","title":"LifeSimultor.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation to be added.","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [LifeSimulator]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [LifeSimulator]\nPrivate = false","category":"page"},{"location":"#LifeSimulator.CashFlow","page":"Home","title":"LifeSimulator.CashFlow","text":"Present value of future cashflows as computed by a Simulation over a UniversalLifeModel.\n\nThe present value of future cashflows is estimated from the future cashflows using a model-provided discount rate.\n\n\n\n\n\n","category":"type"},{"location":"#LifeSimulator.LifelibBasiclife","page":"Home","title":"LifeSimulator.LifelibBasiclife","text":"Term life insurance model replicating the functionality of lifelib's basiclife module.\n\n\n\n\n\n","category":"type"},{"location":"#LifeSimulator.LifelibSavings","page":"Home","title":"LifeSimulator.LifelibSavings","text":"Universal life model reimplemented from lifelib's savings library.\n\n\n\n\n\n","category":"type"},{"location":"#LifeSimulator.Model","page":"Home","title":"LifeSimulator.Model","text":"Model defining the evolution of policies with regards to lapses, cashflows and, for UniversalLifeModels, account values for policy holders.\n\nModels are to be evaluated using a Simulation.\n\nSee also: Policy\n\n\n\n\n\n","category":"type"},{"location":"#LifeSimulator.Policy","page":"Home","title":"LifeSimulator.Policy","text":"Policy held with a corresponding account value.\n\n\n\n\n\n","category":"type"},{"location":"#LifeSimulator.PolicySet","page":"Home","title":"LifeSimulator.PolicySet","text":"Aggregation of a specific type of policy among many policy holders.\n\nThe account for universal life models is therefore also unique among all policy holders, amounting to a total of set.policy.account_value * policy_count(set)\n\n\n\n\n\n","category":"type"},{"location":"#LifeSimulator.Simulation","page":"Home","title":"LifeSimulator.Simulation","text":"Simulation parametrized by a particular Model.\n\nThe simulation time starts at the current date by default. The simulation is carried out every month, producing events ([SimulationEvents]) corresponding to what happened between two timesteps, i.e. from one month to the other. The simulation is nonetheless stateful, meaning that such events may only be produced once; the next evaluation will return the events for the timestep after that.\n\nSee also: next!\n\n\n\n\n\n","category":"type"},{"location":"#LifeSimulator.SimulationEvents","page":"Home","title":"LifeSimulator.SimulationEvents","text":"Events that happen as part of a simulation timestep for a Model.\n\nThese events are meant to be processed by the user in order to generate quantities of interest that do not involve simulation-related state. This is, for example, how the CashFlow quantities are computed.\n\n\n\n\n\n","category":"type"},{"location":"#LifeSimulator.UniversalLifeModel","page":"Home","title":"LifeSimulator.UniversalLifeModel","text":"Universal life model.\n\nThe defining property of a universal life model is that the contract between an insurance company and a policy holder involves a client-managed bank account, where the policy holder is responsible for keeping the bank account appropriately filled.\n\nLapses do not occur in absence of a payment, but rather when the bank account runs out of money while fees or premiums must be paid. It is, for example, for the policy holder to put a lot of money in the bank account and forget about it for a while, as opposed to a regular term life insurance model which requires frequent payments without such buffer.\n\n\n\n\n\n","category":"type"},{"location":"#LifeSimulator.next!-Tuple{Simulation{<:LifelibBasiclife}, SimulationEvents}","page":"Home","title":"LifeSimulator.next!","text":"Perform a simulation timestep over the LifelibBasiclife model, returning a SimulationEvents.\n\nFirst, the policies which reached their term are removed, yielding claims and account changes.\n\nSecond, the policies which start from the current month are added, yielding expenses (costs for the insurance company).\n\nThen, at the middle of the month, deaths and lapses occur. Finally, the simulation time is incremented.\n\nA callback may be run just before the deaths and lapses occur, as the original basiclife model considers lapses and deaths to be part of the next iteration (i.e., deaths and lapses occur prior to the next step, and not in the current step).\n\n\n\n\n\n","category":"method"},{"location":"#LifeSimulator.next!-Tuple{Simulation{<:LifelibSavings}, SimulationEvents}","page":"Home","title":"LifeSimulator.next!","text":"Perform a simulation timestep over the LifelibSavings model, returning a SimulationEvents.\n\nFirst, the policies which reached their term are removed, yielding claims and account changes.\n\nSecond, the policies which start from the current month are added, yielding expenses (costs for the insurance company).\n\nThird, all account values are updated, with:\n\nA premium amount put into the bank account (minus fees, the load premium rate).\nMaintenance fees withdrawn from the back account.\nInsurance costs withdrawn from the back account.\nInvestments realized during the previous month.\n\nThen, at the middle of the month, deaths and lapses occur. Finally, the simulation time is incremented.\n\n\n\n\n\n","category":"method"},{"location":"#LifeSimulator.policies_from_csv","page":"Home","title":"LifeSimulator.policies_from_csv","text":"Import policies from CSV files compatible with the lifelib model.\n\n\n\n\n\n","category":"function"}]
}
